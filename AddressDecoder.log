
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2024  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.47 (git sha1 647d61dd9, clang++ 16.0.0 -fPIC -O3)

yosys> read_liberty -lib /Users/malcolm/atf15xx_yosys/cells.lib

1. Executing Liberty frontend: /Users/malcolm/atf15xx_yosys/cells.lib
Imported 102 cell types from liberty file.

yosys> read_verilog AddressDecoder.v

2. Executing Verilog-2005 frontend: AddressDecoder.v
Parsing Verilog input from `AddressDecoder.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (AddressDecoder.v:42)
Generating RTLIL representation for module `\AddressDecoder'.
Successfully finished Verilog frontend.

yosys> stat

3. Printing statistics.

=== AddressDecoder ===

   Number of wires:                 92
   Number of wire bits:             97
   Number of public wires:          20
   Number of public wire bits:      25
   Number of ports:                 17
   Number of port bits:             22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 72
     $eq                             4
     $ge                             1
     $le                             1
     $logic_and                     24
     $logic_not                     33
     $logic_or                       8
     $mux                            1


yosys> tribuf
4. Executing TRIBUF pass.

yosys> stat

5. Printing statistics.

=== AddressDecoder ===

   Number of wires:                 92
   Number of wire bits:             97
   Number of public wires:          20
   Number of public wire bits:      25
   Number of ports:                 17
   Number of port bits:             22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 72
     $eq                             4
     $ge                             1
     $le                             1
     $logic_and                     24
     $logic_not                     33
     $logic_or                       8
     $tribuf                         1


yosys> synth -flatten -noabc -top AddressDecoder
6. Executing SYNTH pass.

6.1. Executing HIERARCHY pass (managing design hierarchy).

6.1.1. Analyzing design hierarchy..
Top module:  \AddressDecoder

6.1.2. Analyzing design hierarchy..
Top module:  \AddressDecoder
Removed 0 unused modules.

6.2. Executing PROC pass (convert processes to netlists).

6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

6.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

6.2.4. Executing PROC_INIT pass (extract init attributes).

6.2.5. Executing PROC_ARST pass (detect async resets in processes).

6.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

6.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

6.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

6.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

6.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

6.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.
<suppressed ~7 debug messages>

6.3. Executing FLATTEN pass (flatten design).

6.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.

6.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..
Removed 0 unused cells and 17 unused wires.
<suppressed ~1 debug messages>

6.6. Executing CHECK pass (checking for obvious problems).
Checking module AddressDecoder...
Found and reported 0 problems.

6.7. Executing OPT pass (performing simple optimizations).

6.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.

6.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

6.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AddressDecoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AddressDecoder.
Performed a total of 0 changes.

6.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
Removed a total of 0 cells.

6.7.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

6.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.

6.7.9. Rerunning OPT passes. (Maybe there is more to do..)

6.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AddressDecoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AddressDecoder.
Performed a total of 0 changes.

6.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
Removed a total of 0 cells.

6.7.13. Executing OPT_DFF pass (perform DFF optimizations).

6.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..

6.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.

6.7.16. Finished OPT passes. (There is nothing left to do.)

6.8. Executing FSM pass (extract and optimize FSM).

6.8.1. Executing FSM_DETECT pass (finding FSMs in design).

6.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..

6.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.9. Executing OPT pass (performing simple optimizations).

6.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.

6.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
Removed a total of 0 cells.

6.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AddressDecoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AddressDecoder.
Performed a total of 0 changes.

6.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
Removed a total of 0 cells.

6.9.6. Executing OPT_DFF pass (perform DFF optimizations).

6.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..

6.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.

6.9.9. Finished OPT passes. (There is nothing left to do.)

6.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 3 bits (of 4) from port B of cell AddressDecoder.$ge$AddressDecoder.v:37$53 ($ge).

6.11. Executing PEEPOPT pass (run peephole optimizers).

6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..

6.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module AddressDecoder:
  creating $alu model for $ge$AddressDecoder.v:37$53 ($ge): new $alu
  creating $alu model for $le$AddressDecoder.v:37$55 ($le): new $alu
  creating $alu cell for $le$AddressDecoder.v:37$55: $auto$alumacc.cc:485:replace_alu$75
  creating $alu cell for $ge$AddressDecoder.v:37$53: $auto$alumacc.cc:485:replace_alu$84
  created 2 $alu and 0 $macc cells.

6.14. Executing SHARE pass (SAT-based resource sharing).

6.15. Executing OPT pass (performing simple optimizations).

6.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.

6.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
Removed a total of 0 cells.

6.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AddressDecoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AddressDecoder.
Performed a total of 0 changes.

6.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
Removed a total of 0 cells.

6.15.6. Executing OPT_DFF pass (perform DFF optimizations).

6.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

6.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.

6.15.9. Rerunning OPT passes. (Maybe there is more to do..)

6.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AddressDecoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AddressDecoder.
Performed a total of 0 changes.

6.15.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
Removed a total of 0 cells.

6.15.13. Executing OPT_DFF pass (perform DFF optimizations).

6.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..

6.15.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.

6.15.16. Finished OPT passes. (There is nothing left to do.)

6.16. Executing MEMORY pass.

6.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

6.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

6.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

6.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

6.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

6.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..

6.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

6.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..

6.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

6.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..

6.18. Executing OPT pass (performing simple optimizations).

6.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.
<suppressed ~1 debug messages>

6.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
Removed a total of 0 cells.

6.18.3. Executing OPT_DFF pass (perform DFF optimizations).

6.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

6.18.5. Finished fast OPT passes.

6.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

6.20. Executing OPT pass (performing simple optimizations).

6.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.

6.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
Removed a total of 0 cells.

6.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AddressDecoder..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AddressDecoder.
Performed a total of 0 changes.

6.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
Removed a total of 0 cells.

6.20.6. Executing OPT_SHARE pass.

6.20.7. Executing OPT_DFF pass (perform DFF optimizations).

6.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..

6.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.

6.20.10. Finished OPT passes. (There is nothing left to do.)

6.21. Executing TECHMAP pass (map to technology primitives).

6.21.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v
Parsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod$7af24cf7f572852703f08ef7a936c59efa2c57af\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $tribuf.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_lcu_brent_kung\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~419 debug messages>

6.22. Executing OPT pass (performing simple optimizations).

6.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AddressDecoder.
<suppressed ~48 debug messages>

6.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AddressDecoder'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

6.22.3. Executing OPT_DFF pass (perform DFF optimizations).

6.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AddressDecoder..
Removed 6 unused cells and 79 unused wires.
<suppressed ~7 debug messages>

6.22.5. Finished fast OPT passes.

6.23. Executing HIERARCHY pass (managing design hierarchy).

6.23.1. Analyzing design hierarchy..
Top module:  \AddressDecoder

6.23.2. Analyzing design hierarchy..
Top module:  \AddressDecoder
Removed 0 unused modules.

6.24. Printing statistics.

=== AddressDecoder ===

   Number of wires:                 80
   Number of wire bits:            105
   Number of public wires:          20
   Number of public wire bits:      25
   Number of ports:                 17
   Number of port bits:             22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 78
     $_AND_                         30
     $_NOT_                         25
     $_OR_                          22
     $_TBUF_                         1

6.25. Executing CHECK pass (checking for obvious problems).
Checking module AddressDecoder...
Found and reported 0 problems.

yosys> stat

7. Printing statistics.

=== AddressDecoder ===

   Number of wires:                 80
   Number of wire bits:            105
   Number of public wires:          20
   Number of public wire bits:      25
   Number of ports:                 17
   Number of port bits:             22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 78
     $_AND_                         30
     $_NOT_                         25
     $_OR_                          22
     $_TBUF_                         1


yosys> techmap -map /Users/malcolm/atf15xx_yosys/techmap.v -D skip_DFFE_XX_
8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /Users/malcolm/atf15xx_yosys/techmap.v
Parsing Verilog input from `/Users/malcolm/atf15xx_yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_NN0_'.
Generating RTLIL representation for module `\$_DLATCH_NN1_'.
Generating RTLIL representation for module `\$_DLATCH_NP0_'.
Generating RTLIL representation for module `\$_DLATCH_NP1_'.
Generating RTLIL representation for module `\$_DLATCH_PN0_'.
Generating RTLIL representation for module `\$_DLATCH_PN1_'.
Generating RTLIL representation for module `\$_DLATCH_PP0_'.
Generating RTLIL representation for module `\$_DLATCH_PP1_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_NPP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PNP_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPN_'.
Generating RTLIL representation for module `\$_DLATCHSR_PPP_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFSRE_PPPP_'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~23 debug messages>

yosys> stat

9. Printing statistics.

=== AddressDecoder ===

   Number of wires:                 80
   Number of wire bits:            105
   Number of public wires:          20
   Number of public wire bits:      25
   Number of ports:                 17
   Number of port bits:             22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 78
     $_AND_                         30
     $_NOT_                         25
     $_OR_                          22
     $_TBUF_                         1


yosys> simplemap
10. Executing SIMPLEMAP pass (map simple cells to gate primitives).

yosys> stat

11. Printing statistics.

=== AddressDecoder ===

   Number of wires:                 80
   Number of wire bits:            105
   Number of public wires:          20
   Number of public wire bits:      25
   Number of ports:                 17
   Number of port bits:             22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 78
     $_AND_                         30
     $_NOT_                         25
     $_OR_                          22
     $_TBUF_                         1


yosys> dfflibmap -liberty /Users/malcolm/atf15xx_yosys/cells.lib
12. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFF (noninv, pins=4, area=600.00) is a direct match for cell type $_DFF_P_.
  cell DFFAR (noninv, pins=5, area=600.00) is a direct match for cell type $_DFF_PP0_.
  cell DFFAS (noninv, pins=5, area=600.00) is a direct match for cell type $_DFF_PP1_.
  cell DFFARS (noninv, pins=6, area=600.00) is a direct match for cell type $_DFFSR_PPP_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \DFF _DFF_P_ (.CLK( C), .D( D), .Q( Q), .QN(~Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    \DFFAR _DFF_PP0_ (.AR( R), .CLK( C), .D( D), .Q( Q), .QN(~Q));
    \DFFAS _DFF_PP1_ (.AS( R), .CLK( C), .D( D), .Q( Q), .QN(~Q));
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    \DFFARS _DFFSR_PPP_ (.AR( R), .AS( S), .CLK( C), .D( D), .Q( Q), .QN(~Q));

12.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\AddressDecoder':

yosys> stat

13. Printing statistics.

=== AddressDecoder ===

   Number of wires:                 80
   Number of wire bits:            105
   Number of public wires:          20
   Number of public wire bits:      25
   Number of ports:                 17
   Number of port bits:             22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 78
     $_AND_                         30
     $_NOT_                         25
     $_OR_                          22
     $_TBUF_                         1


yosys> abc -liberty /Users/malcolm/atf15xx_yosys/cells.lib
14. Executing ABC pass (technology mapping using ABC).

14.1. Extracting gate netlist of module `\AddressDecoder' to `<abc-temp-dir>/input.blif'..
Extracted 77 gates and 90 wires to a netlist network with 13 inputs and 8 outputs.

14.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /Users/malcolm/atf15xx_yosys/cells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Warning: Templates are not defined.
ABC: Liberty parser cannot read "time_unit".  Assuming   time_unit : "1ns".
ABC: Liberty parser cannot read "capacitive_load_unit". Assuming   capacitive_load_unit(1, pf).
ABC: Scl_LibertyReadGenlib() skipped cell "bibuf" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "TRI" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFEARS".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFE".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFAR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFAS".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFARS".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Library "atf15xx" from "/Users/malcolm/atf15xx_yosys/cells.lib" has 93 cells (9 skipped: 7 seq; 0 tri-state; 2 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.17 MB. Time =     0.00 sec
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

14.1.2. Re-integrating ABC results.
ABC RESULTS:               INV cells:        1
ABC RESULTS:            AND2I2 cells:        1
ABC RESULTS:            AND4I4 cells:        1
ABC RESULTS:           NAND4I1 cells:        1
ABC RESULTS:           NAND2I1 cells:        2
ABC RESULTS:            AND4I3 cells:        1
ABC RESULTS:             NAND3 cells:        1
ABC RESULTS:              AND3 cells:        2
ABC RESULTS:              AND2 cells:        1
ABC RESULTS:           NAND3I1 cells:        2
ABC RESULTS:           NAND3I3 cells:        1
ABC RESULTS:           NAND2I2 cells:        3
ABC RESULTS:             NAND5 cells:        1
ABC RESULTS:        internal signals:       69
ABC RESULTS:           input signals:       13
ABC RESULTS:          output signals:        8
Removing temp directory.

yosys> stat

15. Printing statistics.

=== AddressDecoder ===

   Number of wires:                111
   Number of wire bits:            136
   Number of public wires:          20
   Number of public wire bits:      25
   Number of ports:                 17
   Number of port bits:             22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 19
     $_TBUF_                         1
     AND2                            1
     AND2I2                          1
     AND3                            2
     AND4I3                          1
     AND4I4                          1
     INV                             1
     NAND2I1                         2
     NAND2I2                         3
     NAND3                           1
     NAND3I1                         2
     NAND3I3                         1
     NAND4I1                         1
     NAND5                           1


yosys> #hilomap -hicell VCC X -locell GND X

yosys> #stat

yosys> iopadmap -bits -inpad INBUF Q:A -outpad BUF A:Q -toutpad TRI ENA:A:Q -tinoutpad bibuf EN:Q:A:PAD
16. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Mapping port AddressDecoder.o_DTACK_n[0] using TRI.
Mapping port AddressDecoder.PPDTACK using BUF.
Mapping port AddressDecoder.i_A using INBUF.
Mapping port AddressDecoder.i_AS_n using INBUF.
Mapping port AddressDecoder.i_BOOT using INBUF.
Mapping port AddressDecoder.i_CPUSP_n using INBUF.
Mapping port AddressDecoder.i_LDS_n using INBUF.
Mapping port AddressDecoder.i_LGEXP_n using INBUF.
Mapping port AddressDecoder.i_RW using INBUF.
Mapping port AddressDecoder.i_UDS_n using INBUF.
Mapping port AddressDecoder.o_EVENRAM_n using BUF.
Mapping port AddressDecoder.o_EVENROM_n using BUF.
Mapping port AddressDecoder.o_EXPSEL_n using BUF.
Mapping port AddressDecoder.o_IOSEL_n using BUF.
Mapping port AddressDecoder.o_ODDRAM_n using BUF.
Mapping port AddressDecoder.o_ODDROM_n using BUF.
Mapping port AddressDecoder.o_WR using BUF.

yosys> stat

17. Printing statistics.

=== AddressDecoder ===

   Number of wires:                128
   Number of wire bits:            158
   Number of public wires:          20
   Number of public wire bits:      25
   Number of ports:                 17
   Number of port bits:             22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     AND2                            1
     AND2I2                          1
     AND3                            2
     AND4I3                          1
     AND4I4                          1
     BUF                             8
     INBUF                          13
     INV                             1
     NAND2I1                         2
     NAND2I2                         3
     NAND3                           1
     NAND3I1                         2
     NAND3I3                         1
     NAND4I1                         1
     NAND5                           1
     TRI                             1


yosys> clean
Removed 0 unused cells and 81 unused wires.

yosys> stat

18. Printing statistics.

=== AddressDecoder ===

   Number of wires:                 47
   Number of wire bits:             58
   Number of public wires:          17
   Number of public wire bits:      22
   Number of ports:                 17
   Number of port bits:             22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     AND2                            1
     AND2I2                          1
     AND3                            2
     AND4I3                          1
     AND4I4                          1
     BUF                             8
     INBUF                          13
     INV                             1
     NAND2I1                         2
     NAND2I2                         3
     NAND3                           1
     NAND3I1                         2
     NAND3I3                         1
     NAND4I1                         1
     NAND5                           1
     TRI                             1


yosys> hierarchy
19. Executing HIERARCHY pass (managing design hierarchy).

19.1. Analyzing design hierarchy..
Top module:  \AddressDecoder

19.2. Analyzing design hierarchy..
Top module:  \AddressDecoder
Removed 0 unused modules.

yosys> stat

20. Printing statistics.

=== AddressDecoder ===

   Number of wires:                 47
   Number of wire bits:             58
   Number of public wires:          17
   Number of public wire bits:      22
   Number of ports:                 17
   Number of port bits:             22
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     AND2                            1
     AND2I2                          1
     AND3                            2
     AND4I3                          1
     AND4I4                          1
     BUF                             8
     INBUF                          13
     INV                             1
     NAND2I1                         2
     NAND2I2                         3
     NAND3                           1
     NAND3I1                         2
     NAND3I3                         1
     NAND4I1                         1
     NAND5                           1
     TRI                             1


yosys> splitnets -format _
21. Executing SPLITNETS pass (splitting up multi-bit signals).

yosys> rename -wire -suffix _reg t:*DFF*

yosys> rename -wire -suffix _comb

yosys> #write_edif -attrprop AddressDecoder.edif

yosys> write_edif -lsbidx AddressDecoder.edif

22. Executing EDIF backend.

yosys> exit

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 6cff0005c1, CPU: user 0.07s system 0.01s, MEM: 17.41 MB peak
Yosys 0.47 (git sha1 647d61dd9, clang++ 16.0.0 -fPIC -O3)
Time spent: 64% 1x abc (0 sec), 8% 18x opt_expr (0 sec), ...
